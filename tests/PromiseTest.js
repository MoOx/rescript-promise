// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$Promise = require("../src/Promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var MyError = Caml_exceptions.create("PromiseTest.MyError");

$$Promise.$$then(Promise.reject({
            RE_EXN_ID: MyError,
            _1: "test"
          }), (function (str) {
          console.log("this should not be reached: " + str);
          
        })).catch(function (e) {
      if (e.RE_EXN_ID === MyError) {
        console.log("found MyError: " + e._1);
      } else {
        console.log("Anything else: ");
      }
      
    });

var p = $$Promise.$$then($$Promise.resolve(undefined), (function (param) {
          return Js_exn.raiseError("Some JS error");
        })).catch(function (e) {
      var str = e.message;
      if (str !== undefined) {
        console.log("Promise error occurred: " + str);
      } else {
        console.log("Anything else");
      }
      
    });

var place = {
  contents: 0
};

function delayedMsg(ms, msg) {
  return $$Promise.make(function (resolve, param) {
              setTimeout((function (param) {
                      place.contents = place.contents + 1 | 0;
                      return resolve([
                                  place.contents,
                                  msg
                                ]);
                    }), ms);
              
            });
}

var p1 = delayedMsg(1000, "is Anna");

var p2 = delayedMsg(500, "myName");

var p3 = delayedMsg(100, "Hi");

$$Promise.$$then($$Promise.all([
          p1,
          p2,
          p3
        ]), (function (arr) {
        return Belt_Array.map(arr, (function (param) {
                      console.log("Place " + String(param[0]) + " => " + param[1]);
                      
                    }));
      }));

function racer(ms, name) {
  return $$Promise.make(function (resolve, param) {
              setTimeout((function (param) {
                      return resolve(name);
                    }), ms);
              
            });
}

var promises = [
  racer(1000, "Turtle"),
  racer(500, "Hare"),
  racer(100, "Eagle")
];

$$Promise.$$then(Promise.race(promises), (function (winner) {
        console.log("Congrats: " + winner);
        
      }));

$$Promise.$$then($$Promise.$$then($$Promise.flatThen($$Promise.make(function (resolve, _reject) {
                  return resolve(1);
                }), (function (foo) {
                console.log(foo + 1 | 0);
                return $$Promise.resolve("This is working");
              })), (function (o) {
            console.log("Message received: " + o);
            return "test foo";
          })), (function (s) {
        console.log(s + " is a string");
        
      }));

var racer$1 = $$Promise.$$then(Promise.race([
          $$Promise.resolve(3),
          $$Promise.resolve(2)
        ]), (function (r) {
        console.log("winner: ", r);
        
      }));

var foo = $$Promise.$$then($$Promise.make(function (param, reject) {
            return reject("oops");
          }).catch(function (e) {
          console.log(e);
          return 1;
        }), (function (num) {
        console.log("add + 1 to recovered", num + 1 | 0);
        
      }));

var interop = $$Promise.$$then($$Promise.$$then(Promise.resolve("interop promise"), (function (n) {
            console.log(n);
            return $$Promise.resolve("interop is working");
          })), (function (p) {
        return $$Promise.$$then(p, (function (msg) {
                      console.log(msg);
                      
                    }));
      }));

exports.MyError = MyError;
exports.p = p;
exports.racer = racer$1;
exports.foo = foo;
exports.interop = interop;
/*  Not a pure module */
