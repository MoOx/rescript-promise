// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Test = require("./Test.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$Promise = require("../src/Promise.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var TestError = Caml_exceptions.create("PromiseTest.TestError");

var fail = Js_exn.raiseError;

var equal = Caml_obj.caml_equal;

function creationTest(param) {
  
}

function testFlatThen(param) {
  return $$Promise.$$then($$Promise.flatThen($$Promise.resolve(1), (function (first) {
                    return $$Promise.resolve(first + 1 | 0);
                  })), (function (value) {
                return Test.run([
                            [
                              "PromiseTest.res",
                              57,
                              26,
                              39
                            ],
                            "Should be 2"
                          ], value, equal, 2);
              }));
}

function testThen(param) {
  return $$Promise.$$then($$Promise.$$then($$Promise.$$then($$Promise.resolve(1), (function (param) {
                        return "simple string";
                      })), (function (str) {
                    Test.run([
                          [
                            "PromiseTest.res",
                            72,
                            26,
                            53
                          ],
                          "Should be 'simple string'"
                        ], str, equal, "simple string");
                    return $$Promise.resolve(str);
                  })), (function (p) {
                return $$Promise.$$then(p, (function (str) {
                              return Test.run([
                                          [
                                            "PromiseTest.res",
                                            79,
                                            28,
                                            59
                                          ],
                                          "Should still be simple string"
                                        ], str, equal, "simple string");
                            }));
              }));
}

function runTests(param) {
  testFlatThen(undefined);
  testThen(undefined);
  
}

var ThenChaining = {
  testFlatThen: testFlatThen,
  testThen: testThen,
  runTests: runTests
};

function testExnRejection(param) {
  Promise.reject({
          RE_EXN_ID: TestError,
          _1: "oops"
        }).catch(function (e) {
        return Test.run([
                    [
                      "PromiseTest.res",
                      99,
                      26,
                      30
                    ],
                    "Expect rejection to contain a TestError"
                  ], $$Promise.handleError(e), equal, {
                    RE_EXN_ID: TestError,
                    _1: "oops"
                  });
      });
  
}

function runTests$1(param) {
  testExnRejection(undefined);
  
}

var Rejection = {
  testExnRejection: testExnRejection,
  runTests: runTests$1
};

var asyncParseFail = (function() {
    return new Promise((resolve) => {
      var result = JSON.parse("{..");
      return resolve(result);
    })
  });

function testExternalPromiseThrow(param) {
  return Curry._1(asyncParseFail, undefined).catch(function (e) {
              var err = $$Promise.handleError(e);
              var success = err.RE_EXN_ID === $$Promise.JsError ? Caml_obj.caml_equal(err._1.message, "Unexpected token . in JSON at position 1") : false;
              return Test.run([
                          [
                            "PromiseTest.res",
                            130,
                            26,
                            76
                          ],
                          "Should be a parser error with Unexpected token ."
                        ], success, equal, true);
            });
}

function testExnThrow(param) {
  return $$Promise.$$then($$Promise.resolve(undefined), (function (param) {
                  throw {
                        RE_EXN_ID: TestError,
                        _1: "Thrown exn",
                        Error: new Error()
                      };
                })).catch(function (e) {
              var match = $$Promise.handleError(e);
              var isTestErr = match.RE_EXN_ID === TestError && match._1 === "Thrown exn" ? true : false;
              return Test.run([
                          [
                            "PromiseTest.res",
                            148,
                            26,
                            49
                          ],
                          "Should be a TestError"
                        ], isTestErr, equal, true);
            });
}

function testRaiseErrorThrow(param) {
  return $$Promise.$$then($$Promise.resolve(undefined), (function (param) {
                  return Js_exn.raiseError("Some JS error");
                })).catch(function (e) {
              var err = $$Promise.handleError(e);
              var isTestErr = err.RE_EXN_ID === $$Promise.JsError ? Caml_obj.caml_equal(err._1.message, "Some JS error") : false;
              return Test.run([
                          [
                            "PromiseTest.res",
                            170,
                            26,
                            51
                          ],
                          "Should be some JS error"
                        ], isTestErr, equal, true);
            });
}

function thenAfterCatch(param) {
  return $$Promise.$$then($$Promise.flatThen($$Promise.resolve(undefined), (function (param) {
                      return Promise.reject({
                                  RE_EXN_ID: TestError,
                                  _1: "some rejected value"
                                });
                    })).catch(function (e) {
                  var match = $$Promise.handleError(e);
                  if (match.RE_EXN_ID === TestError && match._1 === "some rejected value") {
                    return "success";
                  } else {
                    return "not a test error";
                  }
                }), (function (msg) {
                return Test.run([
                            [
                              "PromiseTest.res",
                              192,
                              26,
                              45
                            ],
                            "Should be success"
                          ], msg, equal, "success");
              }));
}

function runTests$2(param) {
  testExternalPromiseThrow(undefined);
  testExnThrow(undefined);
  testRaiseErrorThrow(undefined);
  thenAfterCatch(undefined);
  
}

var Catching = {
  asyncParseFail: asyncParseFail,
  testExternalPromiseThrow: testExternalPromiseThrow,
  testExnThrow: testExnThrow,
  testRaiseErrorThrow: testRaiseErrorThrow,
  thenAfterCatch: thenAfterCatch,
  runTests: runTests$2
};

function testParallel(param) {
  var place = {
    contents: 0
  };
  var delayedMsg = function (ms, msg) {
    return $$Promise.make(function (resolve, param) {
                setTimeout((function (param) {
                        place.contents = place.contents + 1 | 0;
                        return resolve([
                                    place.contents,
                                    msg
                                  ]);
                      }), ms);
                
              });
  };
  var p1 = delayedMsg(1000, "is Anna");
  var p2 = delayedMsg(500, "myName");
  var p3 = delayedMsg(100, "Hi");
  return $$Promise.$$then($$Promise.all([
                  p1,
                  p2,
                  p3
                ]), (function (arr) {
                var exp = [
                  [
                    3,
                    "is Anna"
                  ],
                  [
                    2,
                    "myName"
                  ],
                  [
                    1,
                    "Hi"
                  ]
                ];
                return Test.run([
                            [
                              "PromiseTest.res",
                              225,
                              26,
                              55
                            ],
                            "Should have correct placing"
                          ], arr, equal, exp);
              }));
}

function testRace(param) {
  var racer = function (ms, name) {
    return $$Promise.make(function (resolve, param) {
                setTimeout((function (param) {
                        return resolve(name);
                      }), ms);
                
              });
  };
  var promises = [
    racer(1000, "Turtle"),
    racer(500, "Hare"),
    racer(100, "Eagle")
  ];
  return $$Promise.$$then(Promise.race(promises), (function (winner) {
                return Test.run([
                            [
                              "PromiseTest.res",
                              243,
                              26,
                              44
                            ],
                            "Eagle should win"
                          ], winner, equal, "Eagle");
              }));
}

function runTests$3(param) {
  testParallel(undefined);
  testRace(undefined);
  
}

var Concurrently = {
  testParallel: testParallel,
  testRace: testRace,
  runTests: runTests$3
};

runTests(undefined);

testExnRejection(undefined);

runTests$2(undefined);

runTests$3(undefined);

exports.TestError = TestError;
exports.fail = fail;
exports.equal = equal;
exports.creationTest = creationTest;
exports.ThenChaining = ThenChaining;
exports.Rejection = Rejection;
exports.Catching = Catching;
exports.Concurrently = Concurrently;
/*  Not a pure module */
