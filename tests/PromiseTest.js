// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Test = require("./Test.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$Promise = require("../src/Promise.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var TestError = Caml_exceptions.create("PromiseTest.TestError");

var fail = Js_exn.raiseError;

var equal = Caml_obj.caml_equal;

function resolveTest(param) {
  $$Promise.map($$Promise.resolve("test"), (function (str) {
          return Test.run([
                      [
                        "PromiseTest.res",
                        17,
                        26,
                        47
                      ],
                      "Should resolve test"
                    ], str, equal, "test");
        }));
  
}

function runTests(param) {
  return resolveTest(undefined);
}

var Creation = {
  resolveTest: resolveTest,
  runTests: runTests
};

function testFlatThen(param) {
  return $$Promise.map($$Promise.$$then($$Promise.resolve(1), (function (first) {
                    return $$Promise.resolve(first + 1 | 0);
                  })), (function (value) {
                return Test.run([
                            [
                              "PromiseTest.res",
                              38,
                              26,
                              39
                            ],
                            "Should be 2"
                          ], value, equal, 2);
              }));
}

function testThen(param) {
  return $$Promise.map($$Promise.map($$Promise.map($$Promise.resolve(1), (function (param) {
                        return "simple string";
                      })), (function (str) {
                    Test.run([
                          [
                            "PromiseTest.res",
                            53,
                            26,
                            53
                          ],
                          "Should be 'simple string'"
                        ], str, equal, "simple string");
                    return $$Promise.resolve(str);
                  })), (function (p) {
                return $$Promise.map(p, (function (str) {
                              return Test.run([
                                          [
                                            "PromiseTest.res",
                                            60,
                                            28,
                                            59
                                          ],
                                          "Should still be simple string"
                                        ], str, equal, "simple string");
                            }));
              }));
}

function runTests$1(param) {
  testFlatThen(undefined);
  testThen(undefined);
  
}

var ThenChaining = {
  testFlatThen: testFlatThen,
  testThen: testThen,
  runTests: runTests$1
};

function testExnRejection(param) {
  $$Promise.$$catch(Promise.reject({
            RE_EXN_ID: TestError,
            _1: "oops"
          }), (function (e) {
          return Test.run([
                      [
                        "PromiseTest.res",
                        80,
                        26,
                        30
                      ],
                      "Expect rejection to contain a TestError"
                    ], e, equal, {
                      RE_EXN_ID: TestError,
                      _1: "oops"
                    });
        }));
  
}

function runTests$2(param) {
  testExnRejection(undefined);
  
}

var Rejection = {
  testExnRejection: testExnRejection,
  runTests: runTests$2
};

var asyncParseFail = (function() {
    return new Promise((resolve) => {
      var result = JSON.parse("{..");
      return resolve(result);
    })
  });

function testExternalPromiseThrow(param) {
  return $$Promise.$$catch($$Promise.map(Curry._1(asyncParseFail, undefined), (function (param) {
                    
                  })), (function (e) {
                var success = e.RE_EXN_ID === $$Promise.JsError ? Caml_obj.caml_equal(e._1.message, "Unexpected token . in JSON at position 1") : false;
                return Test.run([
                            [
                              "PromiseTest.res",
                              113,
                              26,
                              76
                            ],
                            "Should be a parser error with Unexpected token ."
                          ], success, equal, true);
              }));
}

function testExnThrow(param) {
  return $$Promise.$$catch($$Promise.$$then($$Promise.resolve(undefined), (function (param) {
                    throw {
                          RE_EXN_ID: TestError,
                          _1: "Thrown exn",
                          Error: new Error()
                        };
                  })), (function (e) {
                var isTestErr = e.RE_EXN_ID === TestError && e._1 === "Thrown exn" ? true : false;
                return Test.run([
                            [
                              "PromiseTest.res",
                              131,
                              26,
                              49
                            ],
                            "Should be a TestError"
                          ], isTestErr, equal, true);
              }));
}

function testRaiseErrorThrow(param) {
  return $$Promise.$$catch($$Promise.$$then($$Promise.resolve(undefined), (function (param) {
                    return Js_exn.raiseError("Some JS error");
                  })), (function (e) {
                var isTestErr = e.RE_EXN_ID === $$Promise.JsError ? Caml_obj.caml_equal(e._1.message, "Some JS error") : false;
                return Test.run([
                            [
                              "PromiseTest.res",
                              153,
                              26,
                              51
                            ],
                            "Should be some JS error"
                          ], isTestErr, equal, true);
              }));
}

function thenAfterCatch(param) {
  return $$Promise.map($$Promise.$$catch($$Promise.$$then($$Promise.resolve(undefined), (function (param) {
                        return Promise.reject({
                                    RE_EXN_ID: TestError,
                                    _1: "some rejected value"
                                  });
                      })), (function (e) {
                    if (e.RE_EXN_ID === TestError && e._1 === "some rejected value") {
                      return "success";
                    } else {
                      return "not a test error";
                    }
                  })), (function (msg) {
                return Test.run([
                            [
                              "PromiseTest.res",
                              175,
                              26,
                              45
                            ],
                            "Should be success"
                          ], msg, equal, "success");
              }));
}

function testCatchFinally(param) {
  var wasCalled = {
    contents: false
  };
  $$Promise.map($$Promise.$$catch($$Promise.map($$Promise.$$then($$Promise.resolve(5), (function (param) {
                        return Promise.reject({
                                    RE_EXN_ID: TestError,
                                    _1: "test"
                                  });
                      })), (function (v) {
                    return v;
                  })), (function (param) {
                
              })).finally(function (param) {
            wasCalled.contents = true;
            
          }), (function (v) {
          Test.run([
                [
                  "PromiseTest.res",
                  196,
                  26,
                  48
                ],
                "value should be unit"
              ], v, equal, undefined);
          return Test.run([
                      [
                        "PromiseTest.res",
                        197,
                        26,
                        59
                      ],
                      "finally should have been called"
                    ], wasCalled.contents, equal, true);
        }));
  
}

function testResolveFinally(param) {
  var wasCalled = {
    contents: false
  };
  $$Promise.map($$Promise.map($$Promise.resolve(5), (function (v) {
                return v + 5 | 0;
              })).finally(function (param) {
            wasCalled.contents = true;
            
          }), (function (v) {
          Test.run([
                [
                  "PromiseTest.res",
                  213,
                  26,
                  45
                ],
                "value should be 5"
              ], v, equal, 10);
          return Test.run([
                      [
                        "PromiseTest.res",
                        214,
                        26,
                        59
                      ],
                      "finally should have been called"
                    ], wasCalled.contents, equal, true);
        }));
  
}

function runTests$3(param) {
  testExternalPromiseThrow(undefined);
  testExnThrow(undefined);
  testRaiseErrorThrow(undefined);
  thenAfterCatch(undefined);
  testCatchFinally(undefined);
  testResolveFinally(undefined);
  
}

var Catching = {
  asyncParseFail: asyncParseFail,
  testExternalPromiseThrow: testExternalPromiseThrow,
  testExnThrow: testExnThrow,
  testRaiseErrorThrow: testRaiseErrorThrow,
  thenAfterCatch: thenAfterCatch,
  testCatchFinally: testCatchFinally,
  testResolveFinally: testResolveFinally,
  runTests: runTests$3
};

function testParallel(param) {
  var place = {
    contents: 0
  };
  var delayedMsg = function (ms, msg) {
    return $$Promise.make(function (resolve, param) {
                setTimeout((function (param) {
                        place.contents = place.contents + 1 | 0;
                        return resolve([
                                    place.contents,
                                    msg
                                  ]);
                      }), ms);
                
              });
  };
  var p1 = delayedMsg(1000, "is Anna");
  var p2 = delayedMsg(500, "myName");
  var p3 = delayedMsg(100, "Hi");
  return $$Promise.map($$Promise.all([
                  p1,
                  p2,
                  p3
                ]), (function (arr) {
                var exp = [
                  [
                    3,
                    "is Anna"
                  ],
                  [
                    2,
                    "myName"
                  ],
                  [
                    1,
                    "Hi"
                  ]
                ];
                return Test.run([
                            [
                              "PromiseTest.res",
                              250,
                              26,
                              55
                            ],
                            "Should have correct placing"
                          ], arr, equal, exp);
              }));
}

function testRace(param) {
  var racer = function (ms, name) {
    return $$Promise.make(function (resolve, param) {
                setTimeout((function (param) {
                        return resolve(name);
                      }), ms);
                
              });
  };
  var promises = [
    racer(1000, "Turtle"),
    racer(500, "Hare"),
    racer(100, "Eagle")
  ];
  return $$Promise.map(Promise.race(promises), (function (winner) {
                return Test.run([
                            [
                              "PromiseTest.res",
                              268,
                              26,
                              44
                            ],
                            "Eagle should win"
                          ], winner, equal, "Eagle");
              }));
}

function runTests$4(param) {
  testParallel(undefined);
  testRace(undefined);
  
}

var Concurrently = {
  testParallel: testParallel,
  testRace: testRace,
  runTests: runTests$4
};

resolveTest(undefined);

runTests$1(undefined);

testExnRejection(undefined);

runTests$3(undefined);

runTests$4(undefined);

exports.TestError = TestError;
exports.fail = fail;
exports.equal = equal;
exports.Creation = Creation;
exports.ThenChaining = ThenChaining;
exports.Rejection = Rejection;
exports.Catching = Catching;
exports.Concurrently = Concurrently;
/*  Not a pure module */
